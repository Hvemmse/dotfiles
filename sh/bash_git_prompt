#!/bin/bash

function _update_git_variables {
    _update_git_dir &> /dev/null
    if [ "$?" -eq 0 ]; then
      _update_git_head
      _update_git_detached
      _update_git_branch
      _update_git_changes
    fi
}

function _update_git_dir {
    _git_dir="$(git rev-parse --git-dir)"
}

function _update_git_head {
    read _git_raw_head <"$_git_dir/HEAD"
    _git_head=${_git_raw_head#ref: }
}

function _update_git_detached {
    if [ "$_git_head" = "$_git_raw_head" ]; then
      _git_detached=$(git rev-parse --short HEAD)
    else
      _get_detached=
    fi
}

function _update_git_branch {
    if [ -n "$_git_detached" ]; then
        _git_branch=$(git describe --contains --all HEAD)
    else
        _git_branch=${_git_head##refs/heads/}
    fi
}

function _update_git_changes {
    _git_num_staged=$(git diff --cached --numstat | wc -l | tr -d ' ')
    _git_num_unstaged=$(git diff --numstat | wc -l | tr -d ' ')
    _git_num_untracked=$(git ls-files --others --exclude-standard | wc -l | tr -d ' ')
    _git_staged_color=$BG_DARK_GRAY$(git config --get-color color.status.added green)
    _git_unstaged_color=$BG_DARK_GRAY$(git config --get-color color.status.changed red)
    _git_untracked_color=$BG_DARK_GRAY$(git config --get-color color.status.untracked red)

}

# shamelessly ganked from official git repo's __git_ps1
function prompt_git_activity {
    if [ -d "$_git_dir/rebase-merge" ]; then
        read step 2>/dev/null <"$_git_dir/rebase-merge/msgnum"
        read total 2>/dev/null <"$_git_dir/rebase-merge/end"
        if [ -f "$_git_dir/rebase-merge/interactive" ]; then
            act_message="REBASE-i"
        else
            act_message="REBASE-m"
        fi
    else
        if [ -d "$_git_dir/rebase-apply" ]; then
            read step 2>/dev/null <"$_git_dir/rebase-apply/next"
            read total 2>/dev/null <"$_git_dir/rebase-apply/last"
            if [ -f "$_git_dir/rebase-apply/rebasing" ]; then
                act_message="REBASING"
            elif [ -f "$_git_dir/rebase-apply/applying" ]; then
                act_message="AM"
            else
                act_message="AM/REBASE"
            fi
        elif [ -f "$_git_dir/MERGE_HEAD" ]; then
            act_message="MERGING"
        elif [ -f "$_git_dir/CHERRY_PICK_HEAD" ]; then
            act_message="CHERRY-PICKING"
        elif [ -f "$_git_dir/REVERT_HEAD" ]; then
            act_message="REVERTING"
        elif [ -f "$_git_dir/BISECT_LOG" ]; then
            act_message="BISECTING"
        fi
    fi

    if [ -n "$step" ] && [ -n "$total" ]; then
        act_message="$act_message $step/$total"
    fi

    [ -n "$act_message" ] && echo -ne "\x01${GIT_ACTIVITY_COLOR}\x02$act_message\x01${RESET}\x02"
}

function prompt_git_branch {
    echo -ne "\x01${GIT_BRANCH_COLOR}\x02${_git_branch}\x01${RESET}\x02"
    [ -n "$_git_detached" ] && echo -ne "|\x01${GIT_DETACHED_COLOR}\x020${_git_detached}\x01${RESET}\x02"
}

function prompt_git_changes {
    mode='symbols' # count, symbols

    case "$mode" in
        count)
            staged=$_git_num_staged
            unstaged=$_git_num_unstaged
            untracked=$_git_num_untracked
            ;;
        symbols)
            staged="+"
            unstaged="!"
            untracked="?"
            ;;
    esac

    # turns out there IS a way to escape colors from within a function, and it's
    # using \x01 and \x02. however, trying to output numbers directly after \x02
    # causes the first digit of the number to be consumed, so there is a 0 after
    # each \x02 before the variable in each line of output below. I have no idea
    # why it works, but it works :-(

    delimiter='|'
    count=0

    [ "$_git_num_staged" -gt "0" ] && (( count+=1 )) && echo -ne "\x01${_git_staged_color}\x02${staged}\x01${RESET}\x02"
    [ "$_git_num_unstaged" -gt "0" ] && [ "$count" -gt "0" ] && echo -ne "$delimiter"
    [ "$_git_num_unstaged" -gt "0" ] && (( count+=1 )) && echo -ne "\x01${_git_unstaged_color}\x02${unstaged}\x01${RESET}\x02"
    [ "$_git_num_untracked" -gt "0" ] && [ "$count" -gt "0" ] && echo -ne "$delimiter"
    [ "$_git_num_untracked" -gt "0" ] && (( count+=1 )) && echo -ne "\x01${_git_untracked_color}\x02${untracked}\x01${RESET}\x02"
}

function prompt_git {
    branch=$(prompt_git_branch)
    changes=$(prompt_git_changes)
    activity=$(prompt_git_activity)

    echo -ne "("
    echo -ne "$branch"
    [ -n "$activity" ] && echo -ne "|$activity"
    echo -ne ")"
    [ -n "$changes" ] && echo -ne " [$changes]"
}


