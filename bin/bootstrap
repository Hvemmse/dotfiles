#!/bin/bash

[[ -z "$EMAIL" ]] && EMAIL="max@maxcantor.net"
[[ -z "$DOTFILE_DIRNAME" ]] && DOTFILE_DIRNAME=".common-public"
[[ -z "$GET_PRIVATE" ]] && GET_PRIVATE=true

echo $DOTFILE_DIRNAME > $HOME/.dotfile_directory

DOTFILE_DIR="$HOME/$(<$HOME/.dotfile_directory)"

# setup new ssh key
if ! [ -d .ssh ]; then
    echo "Generating a new SSH key..."

    mkdir .ssh
    chmod 700 .ssh
    ssh-keygen -t rsa -N "" -C "$EMAIL" -f .ssh/id_rsa
    chmod 600 .ssh/id_rsa

    GITHUB_SSH_URL=https://github.com/settings/ssh

    if [ $(uname -s) = "Darwin" ]; then
        pbcopy < .ssh/id_rsa.pub
        open $GITHUB_SSH_URL
    else
        cat .ssh/id_rsa.pub
        echo
        echo $GITHUB_SSH_URL
    fi

    read -p "Hit ENTER after adding GitHub pubkey"
else
    echo ".ssh directory already exists, not generating."
fi

if ! [ -d $DOTFILE_DIR ]; then
    echo "Getting dotfiles..."
    git clone git@github.com:mcantor/dotfiles.git $DOTFILE_DIR
else
    echo "${DOTFILE_DIR} already exists; not cloning."
fi

if [ -d .common-private ]; then
    echo ".common-private already exists; not cloning."
elif [ "$GET_PRIVATE" = false ]; then
    echo "\$GET_PRIVATE set to false; not cloning."
else
    echo "Getting private files..."
    git clone makoto.kenpachi.net:common.git .common-private
fi

# OS X stuff
if [ $(uname -s) = "Darwin" ]; then
  # homebrew must come first so we have ln from coreutils, which
  # is expected by the setup_common_symlinks script
  if hash brew 2>/dev/null; then
    echo "Installing Homebrew..."
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    hash -r

    if ! hash brew 2>/dev/null; then
        echo "brew did not seem to install successfully."
        exit 1
    fi
  fi

  brew install $(tr '\n' ' ' <$DOTFILE_DIR/sh/homebrew_packages)
  brew install findutils --with-default-names

  if brew ls redis 2>/dev/null; then
    ln -sfv /usr/local/opt/redis/*.plist ~/Library/LaunchAgents
    launchctl load ~/Library/LaunchAgents/homebrew.mxcl.redis.plist
  fi

  if brew ls postgres 2>/dev/null; then
    ln -sfv /usr/local/opt/postgresql/*.plist ~/Library/LaunchAgents
    launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist
  fi
fi

# Ubuntu stuff
if [ $(uname -s) = "Linux" ]; then
  sudo apt-get install build-essential

  # nginx
  sudo apt-get install nginx
  sudo groupadd nginx-admin
  sudo usermod -aG nginx-admin mcantor
  sudo chown -R root:nginx-admin /etc/nginx
  sudo chmod -R g+w /etc/nginx

  # ruby
  sudo apt-get install libssl-dev libreadline-dev zlib1g-dev
  echo "Setting up rbenv..."
  git clone https://github.com/rbenv/rbenv.git ~/.rbenv
  echo "Setting up ruby-build..."
  git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build

  # tmux
  sudo apt-get install automake pkg-config libevent-dev libncurses5-dev
  mdkir -p src
  (cd src && \
    git clone https://github.com/tmux/tmux.git && \
    cd tmux && \
    git co 2.2 && \
    sh autogen.sh && \
    ./configure && \
    make && \
    sudo mv tmux /usr/local/bin)
fi

# setup dotfile symlinks
echo "Sourcing bash profile"
source $DOTFILE_DIR/sh/.bash_profile
echo "Setting up home directory symlinks..."
$DOTFILE_DIR/bin/setup_common_symlinks

# vim stuff
echo "Creating vim swap directories..."
mkdir -p ~/.backups/{backups,swaps,undofiles}

if ! [ -d ~/.vim/bundle/Vundle.vim ]; then
    echo "Installing Vundle for Vim..."
    git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
    vim +PluginInstall +qall
fi
